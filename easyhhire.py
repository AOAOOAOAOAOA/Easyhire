import random
import requests
import os
from datetime import datetime
from openpyxl import load_workbook
import telebot
from telebot import types   
import deepl as dep
import time

bot = telebot.TeleBot("6230489836:AAHnBg41o6RZbyLG2JjWeYfOfXRS5SWO0c8")
trans = dep.Translator("725d6dad-e54a-39d2-f167-16a0eec32055:fx")


anket_list = []



fnlog = "Enter.xlsx"
wblog =load_workbook(fnlog)
wslog = wblog["data"]

fnvak = "Vaks.xlsx"
wbvak = load_workbook(fnvak)
wsvak = wbvak["data"]

fn = "Anket.xlsx"
wb =load_workbook(fn)
ws = wb["data"]

lvl = 0

class Entered_in:
    def __init__(self,
                 user,
                 chatid):
        self.user = user
        self.chatid = chatid

entered = []
countentered = 0

Admin = "Oaeoaeoaoe"


Cat_list = []
Cat_list.append("–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
Cat_list.append("–º–∞—Ä–∫–µ—Ç–∏–Ω–≥")
Cat_list.append("–±—å—é—Ç–∏ –∏–Ω–¥—É—Å—Ç—Ä–∏—è (–∫—Ä–∞—Å–æ—Ç—ã)")
Cat_list.append("–≥–æ—Å—Ç–∏–Ω–∏—á–Ω—ã–π –±–∏–∑–Ω–µ—Å")
Cat_list.append("—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–∏–∑–∞–π–Ω")
Cat_list.append("—Ç—É—Ä–∏–∑–º")
Cat_list.append("–ø—Ä–æ–¥–∞–∂–∏")
Cat_list.append("—Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –±–∞—Ä—ã")
Cat_list.append("–±–∏–∑–Ω–µ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
Cat_list.append("–¥–æ–º–∞—à–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª")
Cat_list.append("–¥—Ä—É–≥–∏–µ")

City_vac_list = []
City_vac_list.append("–õ–∏–º–∞—Å–æ–ª")
City_vac_list.append("–°—Ç—Ä–æ–≤–æ–ª–æ—Å")
City_vac_list.append("–ù–∏–∫–æ—Å–∏—è")
City_vac_list.append("–õ–∞—Ä–Ω–∞–∫–∞")
City_vac_list.append("–õ–∞–∫–∞—Ç–∞–º–∏—è")
City_vac_list.append("–ü–∞—Ñ–æ—Å")
City_vac_list.append("–ö–∞—Ç–æ-–ü–æ–ª–µ–º–∏–¥–∏—è")
City_vac_list.append("–ê–≥–ª–∞–Ω–¥–∑–∏—è")
City_vac_list.append("–ê—Ä–∞–¥–∏–ø—É")
City_vac_list.append("–≠–Ω–≥–æ–º–∏")
City_vac_list.append("–õ–∞—Ü–∏—è")
City_vac_list.append("–ü–∞—Ä–∞–ª–∏–º–Ω–∏")
City_vac_list.append("–ú–µ—Å–∞-–ô–∏—Ç–æ–Ω–∏—è")
City_vac_list.append("–ê–π–æ—Å-–ê—Ç–∞–Ω–∞—Å–∏–æ—Å")
City_vac_list.append("–ï—Ä–º–∞—Å–æ–π—è")
City_vac_list.append("–ê–π–æ—Å-–î–æ–º–µ—Ç–∏–æ—Å")
City_vac_list.append("–ò–ø—Å–æ–Ω–∞—Å")
City_vac_list.append("–î–∞–ª–∏")


def Admin_Center(user):
    if (user == Admin):
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
        Add_adm = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ê–Ω–∫–µ—Ç—É")
        See_adm = types.KeyboardButton("–£–≤–∏–¥–µ—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã")
        Change_adm = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
        Writ_adm = types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—ã –∏–∑ –¥–∞—Ç—ã")
        See_adm_vac = types.KeyboardButton("–£–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
        Del_adm_vac = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
        Write_adm_vac = types.KeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –¥–∞—Ç—ã")
        markup.add(Add_adm, See_adm, Change_adm, Writ_adm, See_adm_vac, Del_adm_vac, Write_adm_vac)
        return markup



def classic(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    search = types.KeyboardButton(str(trans.translate_text(text="[üëÅ]–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", target_lang=Find_Language(message))))
    do_anket = types.KeyboardButton(str(trans.translate_text(text="[üîß]–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", target_lang=Find_Language(message))))
    new_vak = types.KeyboardButton(str(trans.translate_text(text="[üî®]–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", target_lang=Find_Language(message))))
    search_vak = types.KeyboardButton(str(trans.translate_text(text="[ü´ß]–ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é", target_lang=Find_Language(message))))
    for vak in Vacantion_list:
        if (vak.user == message.from_user.username):
            new_vak = types.KeyboardButton(str(trans.translate_text(text="[üî®]–ú–æ—è –≤–∞–∫–∞–Ω—Å–∏—è", target_lang=Find_Language(message))))
    for anket in anket_list:
        if (anket.user == message.from_user.username):
            do_anket = types.KeyboardButton(str(trans.translate_text(text="[üîß]–ú–æ—è –∞–Ω–∫–µ—Ç–∞", target_lang=Find_Language(message))))
    change = types.KeyboardButton(str(trans.translate_text(text="[üåê]–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", target_lang=Find_Language(message))))
    markup.add(search, do_anket, search_vak, new_vak, change)
    return markup







def AddVak(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    back = types.KeyboardButton(str(trans.translate_text(text="[üè†]–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", target_lang=Find_Language(message))))
    new_vak = types.KeyboardButton(str(trans.translate_text(text="[üî®]–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", target_lang=Find_Language(message))))
    #city = types.KeyboardButton("üî®–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
    #cat = types.KeyboardButton("üî®–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    #change = types.KeyboardButton("üî®–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
    delete = types.KeyboardButton(str(trans.translate_text(text="[üõë]–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", target_lang=Find_Language(message))))
    markup.add(back, new_vak, delete)
    return markup

def HowMuchVak(message):
    i = 0
    for vak in Vacantion_list:
        if (vak.user == message.from_user.username):
            i+=1
    return i

def FindIndexVak(User, idd):
    oud = 1
    o = 0
    for i in range(len(Vacantion_list)):
        print(f"{Vacantion_list[0].desc}")
        if (User == Vacantion_list[o].user):
            print(f"id {idd} = oud {oud}")
            if (idd == oud):
                print(Vacantion_list[o].desc)
                return i
            else:
                print("–≥–æ–≤–Ω–æ")
                oud += 1
        o += 1
    return o + 1
    print("–Ω–∏–Ω–∞–¥–∏–Ω–æ")


def FindWhichVak(message, idd):
    idhere = 1
    idu = -1
    if (idd == "1"):
        idu = 1
    elif (idd == "2"):
        idu = 2
    elif (idd == "3"):
        idu = 3
    for vak in Vacantion_list:
        if (vak.user == message.from_user.username):
            if (idhere == idu):
                return vak
            else:
                idhere += 1
    return None




def ListOfCat():
    text = ""
    for cat in Cat_list:
        text += f"\n-" + cat 
    return text

def CheckListOfCat(message):
    for cat in Cat_list:
        if (message.text.upper() == cat.upper()):
            return True
    return False

def ListOfCityVAC():
    text = ""
    for city in City_vac_list:
        text += f"\n-" + city 
    return text

def CheckListOfCityVAC(message):
    for city in City_vac_list:
        if (message.text.upper() == city.upper()):
            return True
    return False





def DoChange(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    namu = types.KeyboardButton(str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –ò–º—è", target_lang=Find_Language(message))))
    dascu = types.KeyboardButton(str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –û–ø–∏—Å–∞–Ω–∏–µ", target_lang=Find_Language(message))))
    fotu = types.KeyboardButton(str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –§–æ—Ç–æ", target_lang=Find_Language(message))))
    video = types.KeyboardButton(str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –í–∏–¥–µ–æ", target_lang=Find_Language(message))))
    profu = types.KeyboardButton(str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –ü—Ä–æ—Ñ–µ—Å–∏—é", target_lang=Find_Language(message))))
    toun = types.KeyboardButton(str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –ì–æ—Ä–æ–¥", target_lang=Find_Language(message))))
    back = types.KeyboardButton(str(trans.translate_text(text="[üè†]–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", target_lang=Find_Language(message))))
    anket_now = IsHisAnket(message.from_user.username)
    if (anket_now.active == True):
        act = types.KeyboardButton(str(trans.translate_text(text="[üõë]–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É", target_lang=Find_Language(message))))
    else:
        act = types.KeyboardButton(str(trans.translate_text(text="[üõë]–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É", target_lang=Find_Language(message))))
    
    markup.add(toun, namu, dascu, fotu, video ,profu,back, act )
    return markup

def Language(user):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    Eng = types.KeyboardButton("üá¨üáß English")
    Ru = types.KeyboardButton("üá∑üá∫ —Ä—Éc–∫–∏–π")
    Ua = types.KeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π")
    De = types.KeyboardButton("üá©üá™ Deutsch")
    El = types.KeyboardButton("üá¨üá∑ ŒïŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ")
    Fr = types.KeyboardButton("üá´üá∑ Fran√ßais")
    markup.add(Eng, Ru, Ua, De, El, Fr)
    return markup


def eat(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    find = types.KeyboardButton(str(trans.translate_text(text="[üîç]–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∞—É–Ω—Ç —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è[üîé]", target_lang=Find_Language(message))))
    rew = types.KeyboardButton(str(trans.translate_text(text="[üèπ]–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", target_lang=Find_Language(message))))
    back = types.KeyboardButton(str(trans.translate_text(text="[üè†]–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", target_lang=Find_Language(message))))
    markup.add(back, rew, find)
    return markup

def eatvak(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    rew = types.KeyboardButton(str(trans.translate_text(text="[üèπ]–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π", target_lang=Find_Language(message))))
    back = types.KeyboardButton(str(trans.translate_text(text="[üè†]–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", target_lang=Find_Language(message))))
    markup.add(back, rew)
    return markup

class Anket:
    def __init__(self,
                 name,
                 description,
                 photo,
                 video,
                 profession,
                 city,
                 user):
        self.name = name
        self.description = description
        self.photo = photo
        self.video = video
        self.profession = profession
        self.city = city
        self.user = user
        self.active = True
        self.revs = []

class Founder:
    def __init__(self,
                user,
                city,
                prof):
        self.user = user
        self.city = city
        self.prof = prof

Founder_list = []

class Founder_vac:
    def __init__(self,
                 user,
                 city,
                 cat):
        self.user = user
        self.city = city
        self.cat = cat
    
Founder_vac_list = []



class CurrentUser:
    def __init__(self,
                 user, 
                 issearching):
        self.user = user
        self.issearching = issearching

Vacantion_list = []

class Vacantion:
    def __init__(self,
                 user,
                 cat,
                 city,
                 desc):
        self.user = user
        self.cat = cat
        self.city = city
        self.desc = desc


CurrentUser_list = []


Profession_list = []



#def ListOfProf():
#    was = []
#    text = ""
#    for profesion in Profession_list:
#        CanBe = True
#        for k in was:
#            if (profesion == k):
#                CanBe = False
#        if (CanBe == True):   
#            count = 0
#            for i in Profession_list:
#                if (profesion == i):
#                    count += 1
#            was.append(profesion)
#            text += f"\n{profesion} - {count} –∞–Ω–∫–µ—Ç —Å —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å–∏–µ–π"
#    return text

class ListOnProfOne:
    def __init__(self,
                 prof,
                 count):
        self.prof = prof
        self.count = count


def ListOfProf():
    text = ""
    ARListOfProf = []
    for ank in anket_list:
        IsWas = False
        for i in range(len(ARListOfProf)):
            if (ARListOfProf[i].prof.upper() == ank.profession.upper()):
                IsWas = True
                ARListOfProf[i].count += 1
        if (IsWas == False):
            ARListOfProf.append(ListOnProfOne(prof=ank.profession, count= 1))
    for prof in ARListOfProf:
        text += f"\n{prof.prof} - {prof.count} –∞–Ω–∫–µ—Ç —Å —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å–∏–µ–π"
    return text

class ListOnCityOne:
    def __init__(self,
                 city,
                 count):
        self.city = city
        self.count = count

City_list = []

def ListOfCity():
    text = ""
    ARListOfCity = []
    for ank in anket_list:
        IsWas = False
        for i in range(len(ARListOfCity)):
            if (ARListOfCity[i].city.upper() == ank.city.upper()):
                IsWas = True
                ARListOfCity[i].count += 1
        if (IsWas == False):
            ARListOfCity.append(ListOnCityOne(city=ank.city, count= 1))
    for city in ARListOfCity:
        text += f"\n{city.city} - {city.count} –∞–Ω–∫–µ—Ç —Å —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞"
    return text

def IsHisAnket(user):
    for anket in anket_list:
        if (anket.user == user):
            return anket

def SearchWithSameSett(user):
    for founder in Founder_list:
        if (founder.user == user):
            return founder
        
def SearchWithSameSettVak(user):
    for vak in Founder_vac_list:
        if (vak.user == user):
            return vak


def CurrentUserFound(user):
    for current_user in CurrentUser_list:
        if (current_user.user == user):
            return current_user

def CurrentUserDelete(user):
    i = 0
    for current_user in CurrentUser_list:
        if (current_user.user == user):
            return i
        else: 
            i += 1


def DataAdd(anket):
    index = str(anket_list.index(anket) + 2)
    ws["A" + index] = anket.user 
    ws["B" + index] = anket.name
    ws["C" + index] = anket.profession
    ws["D" + index] = anket.city
    ws["E" + index] = anket.description
    ws["F" + index] = anket.photo
    ws["G" + index] = anket.video
    ws["H" + index] = anket.active
    ws["J1"] = len(anket_list)
    
    wb.save(fn)

def DataAddVak(vak):
    index = str(Vacantion_list.index(vak) + 2)
    wsvak["A" + index] = vak.user
    wsvak["B" + index] = vak.cat 
    wsvak["C" + index] = vak.city
    wsvak["D" + index] = vak.desc
    wsvak["E" + index] = "#undeleted"
    wsvak["F2"] = len(Vacantion_list)

    print(wsvak["D" + index].value)

    wbvak.save(fnvak)    
    

def DataRead():
    indexx = 2
    count = ws["J1"].internal_value 
    for i in range(count):
            anket_list.append(Anket(name=ws["B" + str(indexx)].value, 
                                    description=ws["E" + str(indexx)].value, 
                                    photo=ws["F" + str(indexx)].value, 
                                    video=ws["G" + str(indexx)].value, 
                                    profession= ws["C" + str(indexx)].value, 
                                    city= ws["D" + str(indexx)].value, 
                                    user=ws["A" + str(indexx)].value))
            
            Profession_list.append(ws["C" + str(indexx)].value)
            City_list.append(ws["D" + str(indexx)].value)
            indexx += 1

def DataReadVak():
    indexx = 2
    count = wsvak["F2"].internal_value
    for i in range(count):
        if (wsvak["E" + str(indexx)].value != "#deleted"):
            Vacantion_list.append(Vacantion(user=wsvak["A" + str(indexx)].value,
                                            cat=wsvak["B" + str(indexx)].value,
                                            city=wsvak["C" + str(indexx)].value,
                                            desc=wsvak["D" + str(indexx)].value))
        else:
            pass
        indexx += 1
        
def Find_Language(message):
    
    if (message.from_user.username == Admin):
        return 'RU'
    else:
        indexx = wslog["F1"].value
        for i in range(indexx):
            if (f"@{message.from_user.username}" == wslog["A" + str(indexx)].value):
                return wslog["D" + str(indexx)].value
            
            
def Change_Language(message):
    
    if (message.from_user.username == Admin):
        return 'RU'
    else:
        indexx = wslog["F1"].value
        for i in range(indexx):
            if (f"@{message.from_user.username}" == wslog["A" + str(indexx)].value):
                lang = ""
                if (message.from_user.username != Admin):
                    if (message.text == "üá¨üáß English"): lang = "EN-GB"
                    if (message.text == "üá∑üá∫ —Ä—Éc–∫–∏–π"): lang = 'RU'
                    if (message.text == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π"): lang = "UK"
                    if (message.text == "üá©üá™ Deutsch"): lang = "DE"
                    if (message.text == "üá¨üá∑ ŒïŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ"): lang = "EL"
                    if (message.text == "üá´üá∑ Fran√ßais"): lang = "FR"
                print(lang)
                wslog["D" + str(indexx)] = lang 
                wblog.save(fnlog)
                print (wslog["D" + str(indexx)].value)
        
       
def send_mes(message ,text, mark=0): bot.send_message(chat_id=message.chat.id, text=trans.translate_text(text=text, target_lang= Find_Language(message=message)))


def send_mes(message, text, mark): bot.send_message(chat_id=message.chat.id, text=trans.translate_text(text=text, target_lang= Find_Language(message=message)), reply_markup=mark)






@bot.message_handler(commands=["create_anket"])
def create_anket(message):
    try:
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        #bot.send_message(chat_id=message.chat.id, text=f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞ –ö–∏–ø—Ä–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –± —Ö–æ—Ç–µ–ª–∏-–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å (–Ω–∞—Ä–ø–∏–º–µ—Ä: –õ–∞–Ω–∞–∫–∞, –õ–∏–º–∞—Å—Å–æ–ª–ª, –ü–∞—Ñ–æ—Å, –ù–∏–∫–æ—Å–∏—è –∏ —Ç.–¥).\n–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —Ç—É—Ç –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫: \n" + ListOfCity())
        send_mes(message=message, text=f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞ –ö–∏–ø—Ä–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –± —Ö–æ—Ç–µ–ª–∏-–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å (–Ω–∞—Ä–ø–∏–º–µ—Ä: –õ–∞–Ω–∞–∫–∞, –õ–∏–º–∞—Å—Å–æ–ª–ª, –ü–∞—Ñ–æ—Å, –ù–∏–∫–æ—Å–∏—è –∏ —Ç.–¥).\n–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —Ç—É—Ç –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–æ–∫: \n" + ListOfCity(), mark=None )
        bot.register_next_step_handler(message, process_city)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        #send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")


def process_city(message):
    try:
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        global city 
        city = message.text
        City_list.append(city)
        #bot.send_message(chat_id=message.chat.id, text=f"–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç–µ.\n–ï—Å–ª–∏ –≤–∞—à–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Ç—É—Ç –Ω–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –µ–µ —É–∫–∞–∑–∞—Ç—å –∏ –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫:\n" + ListOfProf())
        send_mes(message, text=f"–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç–µ.\n–ï—Å–ª–∏ –≤–∞—à–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Ç—É—Ç –Ω–µ—Ç, –≤—ã –º–æ–∂–µ—Ç–µ –µ–µ —É–∫–∞–∑–∞—Ç—å –∏ –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫:\n" + ListOfProf(), mark=None)
        bot.register_next_step_handler(message, process_profesion)
    except:
        bot.send_message(chat_id=message.chat.id, text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ", reply_markup=classic(message))

def process_profesion(message):
    try:
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        global profession
        profession = message.text
        Profession_list.append(profession)
        #bot.send_message(chat_id=message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
        send_mes(message, text= "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é", mark=0)
        bot.register_next_step_handler(message, process_name)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")

def process_name(message):
    try:
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        global name
        name = message.text
        #bot.send_message(chat_id=message.chat.id, text="–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–Ω–µ—Å—Ç–∏ —Å–ª–µ–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: \n-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, \n-–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, \n-–≤–æ–∑—Ä–∞—Å—Ç,\n-–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ,\n-–≤–ª–∞–¥–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏,\n-–Ω–∞–≤—ã—á–∫–∏,\n-–≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã,\n-–Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è,\n-—Å—Ç–∞—Ç—É—Å –ø—Ä–∏–±—ã–≤–∞–Ω—è –Ω–∞ –ö–∏–ø—Ä–µ.\n\n–¢–∞–∫-–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é")
        send_mes(message, mark=0, text="–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–Ω–µ—Å—Ç–∏ —Å–ª–µ–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: \n-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, \n-–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, \n-–≤–æ–∑—Ä–∞—Å—Ç,\n-–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ,\n-–≤–ª–∞–¥–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏,\n-–Ω–∞–≤—ã—á–∫–∏,\n-–≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã,\n-–Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è,\n-—Å—Ç–∞—Ç—É—Å –ø—Ä–∏–±—ã–≤–∞–Ω—è –Ω–∞ –ö–∏–ø—Ä–µ.\n\n–¢–∞–∫-–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é" )
        bot.register_next_step_handler(message, process_description)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")

def process_description(message):
    try:
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        global description
        description = message.text
        #bot.send_message(chat_id=message.chat.id, text="–î–∞–ª–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —Ä–∞–±–æ—Ç–∞–¥–∞—Ç–µ–ª–∏")
        send_mes(message, mark=0, text="–î–∞–ª–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –í–∞—à–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —Ä–∞–±–æ—Ç–∞–¥–∞—Ç–µ–ª–∏")
        bot.register_next_step_handler(message, process_photo)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")

def process_photo(message):
    try:
        if isinstance(message.text, str):
            if (message.text.upper() == "–°–¢–û–ü"):
                send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
            else:
                send_mes(message, text="–ù–µ —Ç–µ–∫—Å—Ç –∞ —Ñ–æ—Ç–æ, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞")
                bot.register_next_step_handler(message, process_photo)
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        with open(f"{file_id}.jpg", "wb") as f:
            f.write(file)
        #bot.send_message(chat_id=message.chat.id, text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∞ —Ç–∞–∫-–∂–µ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è \n(–µ—Å–ª–∏ –≤—ã —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —Ç–æ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ mp4)")
        send_mes(message, mark=0, text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –¥–ª–∏–Ω–Ω–æ–π –º–∏–Ω—É—Ç–æ–π, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∞ —Ç–∞–∫-–∂–µ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è \n(–µ—Å–ª–∏ –≤—ã —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, —Ç–æ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ mp4 –¥–æ 20 mb)")
        bot.register_next_step_handler(message, process_video, file_id)
    except:
        #bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—Ç–µ –§–û–¢–û")
        send_mes(message, mark=0, text="–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—Ç–µ –§–û–¢–û")
        bot.register_next_step_handler(message, process_photo)
    


def process_video(message, thing):
    try:
        if isinstance(message.text, str):
            if (message.text.upper() == "–°–¢–û–ü"):
                send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
            else:
                send_mes(message, text="–ù–µ —Ç–µ–∫—Å—Ç –∞ —Ñ–æ—Ç–æ, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞")
                bot.register_next_step_handler(message, process_video, thing)
        video_id = message.video.file_id
        video = bot.get_file(video_id)
        video_url = f"https://api.telegram.org/file/bot{bot.token}/{video.file_path}"
        response = requests.get(video_url)
        if response.status_code == 200:
            with open(f"{video_id}.mp4", "wb") as f:
                f.write(response.content)
        anket = Anket(name, description, f"{thing}.jpg", f"{video_id}.mp4", profession, city, message.from_user.username)
        anket_list.append(anket)
        DataAdd(anket)
        send_mes(message, mark=classic(message), text=f"üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–±–æ—Ç–∞–¥–∞—Ç–µ–ª–µ–º.\n–î–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∞ —Ç–∞–∫-–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —ç—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å" )
        #bot.send_message(chat_id=message.chat.id, reply_markup = classic(message.from_user.username), text=f"üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–±–æ—Ç–∞–¥–∞—Ç–µ–ª–µ–º.\n–î–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –∞ —Ç–∞–∫-–∂–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —ç—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å")
    except:
        bot.send_message(chat_id=message.chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–ª–∏–Ω–∞ –≤–∏–¥–µ–æ –¥–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã, –æ—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∏–¥–µ–æ ")
        bot.register_next_step_handler(message, process_video, thing)

@bot.message_handler(commands=["get_random_anket"])
def get_random_anket(message):
    if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
    #bot.send_message(chat_id=message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∏—â–∏—Ç–µ –∏—Å—Ö–æ–¥—è –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞:\n" + ListOfProf())
    send_mes(message,mark=0, text= "–£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –∏—â–∏—Ç–µ –∏—Å—Ö–æ–¥—è –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞:\n" + ListOfProf())
    bot.register_next_step_handler(message, get_city_anket)

def get_city_anket(message):
    if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
    #bot.send_message(chat_id=message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–∏—Ç–µ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞:\n" + ListOfCity())
    send_mes(message, mark=0, text="–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–∏—Ç–µ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞:\n" + ListOfCity())
    bot.register_next_step_handler(message, find_random_anket, message.text, " ")

def find_random_anket(message, prof, cityy):
    #try:
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        if anket_list:
            BlackList = []
            Nothing = False
            while True:
                #–º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã?
                if(len(BlackList) == int(ws["J1"].value)):
                    Nothing = True
                    break
                
                index = random.randint(2, int(ws["J1"].value) + 1) #—Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                
                was = False #–±—ã–ª –ª–∏ —É–∂–µ –∏–Ω–¥–µ–∫—Å –≤ –±–ª—ç–∫ –ª–∏—Å—Ç?
                
                for i in BlackList:#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–µ–∫ –ª–∏—Å—Ç
                    if (i == index):
                        was = True
                        
                if (was == False):#–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ
                    if(str(ws[f"H{index}"].value) == "True"): #–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ
                        if(str(trans.translate_text(text=message.text, target_lang='RU')).upper() == str(trans.translate_text(text=ws[f"D{index}"].value, target_lang='RU')).upper()): #–µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç
                            gorone = f"{trans.translate_text(text=ws[f'C{index}'].value, target_lang='RU')}".upper()
                            gortwo = f"{trans.translate_text(text=prof, target_lang='RU')}".upper()
                            if (gorone == gortwo): #–µ—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç
                                CurrentUser_list.append(CurrentUser(message.from_user.username, ws[f"A{index}"])) #–¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–∏—Å–∫–∞—Ç—å –¥–∞–ª—å—à–µ"
                                #–¥–æ–±–æ–≤–ª—è–µ–º –≤ –≥—Ä—É–ø—É —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ, –∏ –æ—Ç–ø—Ä–æ–≤–ª—è–µ–º
                                media_group = []
                                with open(ws[f"F{index}"].value, "rb") as f:
                                    media_group.append(telebot.types.InputMediaPhoto(f))
                                    with open(ws[f"G{index}"].value, "rb") as v:
                                        media_group.append(telebot.types.InputMediaVideo(v))
                                        bot.send_media_group(chat_id=message.chat.id, media = media_group)
                                #–æ—Ç–ø—Ä–æ–≤–ª—è–µ–º –∏–Ω—Ñ—É
                                send_mes(message, text=f'–ò–º—è: {ws[f"B{index}"].value}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {ws[f"C{index}"].value} \n–ì–æ—Ä–æ–¥: {ws[f"D{index}"].value} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{ws[f"E{index}"].value}', mark= eat(message))
                                

                                for pers in range(int(wslog["F1"].value)):
                                    print(f'@{message.from_user.username} == {wslog[f"A{pers + 1}"].value} // {wslog["F1"].value}')
                                    if (f"@{message.from_user.username}" == str(wslog[f"A{pers + 1}"].value)):
                                        print(f"{pers + 1}")
                                        wslog[f"G{pers + 1}"] = message.text
                                        wslog[f"H{pers + 1}"] = gorone
                                        print("fdgfdgs")
                                        wblog.save(fnlog)
                                
                                
                                
                                break
                            else: 
                                BlackList.append(index)

                        else: 
                            BlackList.append(index)
                            print(type(str(trans.translate_text(text=message.text, target_lang='RU')).upper()))
                            print(str(trans.translate_text(text=message.text, target_lang='RU')).upper())
                            print("=")
                            print(type(str(trans.translate_text(text=ws[f"D{index}"].value, target_lang='RU')).upper()))
                            print(str(trans.translate_text(text=ws[f"D{index}"].value, target_lang='RU')).upper())
                    else: 
                        BlackList.append(index)
                        print("–∞–∫—Ç–∏–≤")
            
            if (Nothing): #–Ω–µ—Ç –∞–Ω–∫–µ—Ç
                send_mes(message,mark=0, text=f"–í–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å–∏—é –µ—â–µ —Ä–∞–∑")
                #for i in BlackList:
                #    print(f'{ws[f"B{i}"].value} {ws[f"C{i}"].value.upper()} == {prof.upper()} /// {ws[f"D{i}"].value.upper()} == {message.text.upper()} /// {str(ws[f"H{index}"].value)} == true')
                bot.register_next_step_handler(message, get_city_anket)
               
            
            
            
            
            
            #IsNoAnket = False
            #BlackList = []
            #i = 0
            #while True:
            #    anket = random.choice(anket_list)
            #    print(f"{trans.translate_text(text=prof.upper(), target_lang=Find_Language(message))}  == {trans.translate_text(text=anket.profession.upper(), target_lang=Find_Language(message))}")
            #    print(f"{trans.translate_text(text=message.text.upper(), target_lang=Find_Language(message))} == {trans.translate_text(text=anket.city.upper(), target_lang=Find_Language(message))}")
            #    print("–¥–æ—Ö–æ–¥—Ç")
            #    if (str(trans.translate_text(text=prof.upper(), target_lang="EN-GB"))== str(trans.translate_text(text=anket.profession.upper(), target_lang="EN-GB")) and str(trans.translate_text(text=message.text.upper(), target_lang="EN-GB")) == str(trans.translate_text(text=anket.city.upper(), target_lang="EN-GB")) and anket.active == True):
            #        print("DA")
            #        IsNoAnket = True
            #        break
            #    else:
            #        BlackList.append(anket)
            #    for ank in BlackList:
            #        if (ank == anket):
            #            i += 1
            #    if (i == len(anket_list)):
            #        break
            #    IsNoAnket
            #if (IsNoAnket == True):
            #   with open(anket.photo, "rb") as f:
            #        with open(anket.video, "rb") as v:
            #            
            #            media_group.append(telebot.types.InputMediaPhoto(f))
            #            media_group.append(telebot.types.InputMediaVideo(v))
            #            Founder_list.append(Founder(message.from_user.username, message.text, prof))
            #            CurrentUser_list.append(CurrentUser(message.from_user.username, anket.user))
            #            print (f"–î–æ–±–∞–≤–ª–µ–Ω —é–∑–µ—Ä —Å –Ω–∏–∫–æ–º {CurrentUserFound(message.from_user.username).issearching}")
            #            bot.send_media_group(chat_id=message.chat.id, media = media_group)
            #            send_mes(message, text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description}", mark= eat(message))
            #            #bot.send_message(chat_id=message.chat.id, text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description}", reply_markup= eat())
        #    else:
        #        #bot.send_message(chat_id=message.chat.id, text="–í–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑")
        #        #bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å–∏—é")
        #        send_mes(message,mark=0, text=f"–í–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å–∏—é –µ—â–µ —Ä–∞–∑")
        #        bot.register_next_step_handler(message, get_city_anket)
        #else:
        #    bot.send_message(chat_id=message.chat.id, text="No anket found", reply_markup= eat())
    #except:
        #bot.send_message(chat_id=message.chat.id, text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ", reply_markup=classic(message))
        #get_random_anket(message)


@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(chat_id=message.chat.id, reply_markup=Language(message.from_user.username), text=f"üá¨üáß English?\nüá∑üá∫ —Ä—Éc–∫–∏–π?\nüá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π?\nüá©üá™ Deutsch?\nüá¨üá∑ ŒïŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ?\nüá´üá∑ Fran√ßais?" )
    print("")
    bot.register_next_step_handler(message, starte)

def starte (message):
    print("–ø–µ—Ä–µ—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    curent_enter = Entered_in("@" + message.from_user.username, message.chat.id)
    entered.append(curent_enter)
    global countentered
    countentered += 1
    print(countentered)
    wslog["A" + str(countentered)] = curent_enter.user
    wslog["B" + str(countentered)] = curent_enter.chatid
    wslog["C" + str(countentered)] = datetime.now()
    lang = ""
    if (message.from_user.username != Admin):
        if (message.text == "üá¨üáß English"): lang = "EN-GB"
        if (message.text == "üá∑üá∫ —Ä—Éc–∫–∏–π"): lang = 'RU'
        if (message.text == "üá©üá™ Deutsch"): lang = "DE"
        if (message.text == "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π"): lang = "UK"
        if (message.text == "üá¨üá∑ ŒïŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ"): lang = "EL"
        if (message.text == "üá´üá∑ Fran√ßais"): lang = "FR"
    print (lang)
    print(message.text)
    wslog["D" + str(countentered)] = lang
    wslog["F1"] = countentered
    wblog.save(fnlog)
    print("—É—Å–µ –∑–∞–≥—Ä—É–∑–∏–ª")
    print(wslog["A" + str(countentered)].value)
    print(Find_Language(message))
    send_mes(message, text=f"–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –±–µ—Ç–∞-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ \"EasyHire\". \n–î–æ–ª–∂–µ–Ω –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –≤ –∫–æ–Ω–µ—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –±–æ–ª–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∏ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è —Å—Ç–∞–Ω–µ—Ç –ø–ª–∞—Ç–Ω—ã–º. –í—Å–µ –∞–Ω–∫–µ—Ç—ã –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –±–æ—Ç–∞.\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n[üëÅ]–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ - —ç—Ç–æ–π –æ–ø—Ü–∏–µ–π –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –≤—ã –∏—â–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n[üîß]–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É - –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã\n[üî®]–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é - –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ä–∞–±–æ—Ç–∞–¥–∞—Ç–µ–ª–∏, –∏–º–µ—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–∏ –∫ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—é \n[ü´ß]–ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é - –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –ø—É–Ω–∫—Ç–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤–∞–º —Ä–∞–±–æ—Ç—É", mark= classic(message))
    print("–≤—Å–µ —Å–∫–∞–∑–∞–ª")
    

@bot.message_handler(commands=["create_vacantions"])
def create_vacantions(message):
    try:
        if (message.text.upper() == "–°–¢–û–ü"):
            #send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        if (HowMuchVak(message) < 3):
            print(HowMuchVak(message))
            print(message.from_user.username)
            current_vacantion = Vacantion(user=message.from_user.username, cat= "null", city= "null", desc= "null")
            #bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é:" + ListOfCat())
            send_mes(message,mark=0,text= "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é:" + ListOfCat())
            bot.register_next_step_handler(message, vacantions_procc_cat, current_vacantion)
        else:
            send_mes(message, mark=AddVak(message), text="–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 3 –≤–∞–∫–∞–Ω—Å–∏–∏, —ç—Ç–æ –ø–æ–∫–∞ –º–∞–∫—Å–∏–º—É–º, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—å—Å—è –±–æ–ª—å—à–µ, –ø–∏—à–∏—Ç–µ –Ω–∞ @EasyHireHELP")
           # bot.send_message(chat_id=message.chat.id, text="–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 3 –≤–∞–∫–∞–Ω—Å–∏–∏, —ç—Ç–æ –ø–æ–∫–∞ –º–∞–∫—Å–∏–º—É–º, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—å—Å—è –±–æ–ª—å—à–µ, –ø–∏—à–∏—Ç–µ –Ω–∞ @EasyHireHELP", reply_markup=AddVak())
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, create_vacantions)

def vacantions_procc_cat(message, current_vacantion):
    try:
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        if (CheckListOfCat(message=message)):
            #bot.send_message(chat_id=message.chat.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:{message.text}")
            send_mes(message, mark=0,text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:{message.text}")
            current_vacantion.cat = message.text
            #bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:" + ListOfCityVAC())
            send_mes(message,mark=0, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:" + ListOfCityVAC())
            bot.register_next_step_handler(message, vacantions_city_cat, current_vacantion)
        else:
            #bot.send_message(chat_id=message.chat.id, text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            send_mes(message,mark=0, text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            bot.register_next_step_handler(message, vacantions_procc_cat, current_vacantion)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, vacantions_procc_cat, current_vacantion)

def vacantions_city_cat(message, current_vacantion):
    try:
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        if (CheckListOfCityVAC(message=message)):
            current_vacantion.city = message.text
            #bot.send_message(chat_id=message.chat.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥:{message.text}")
            send_mes(message,mark=0, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥:{message.text}")
            #bot.send_message(chat_id=message.chat.id, text="–û–ø–∏—à–∏—Ç–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É, –∞ —Ç–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ \n(–¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
            send_mes(message,mark=0, text="–û–ø–∏—à–∏—Ç–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É, –∞ —Ç–∞–∫ –∂–µ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ \n(–¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
            bot.register_next_step_handler(message, vacantions_desc_cat, current_vacantion)
        else:
            #bot.send_message(chat_id=message.chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            send_mes(message,mark=0, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            bot.register_next_step_handler(message, vacantions_city_cat, current_vacantion)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, vacantions_city_cat, current_vacantion)

def vacantions_desc_cat(message, current_vacantion):
    try:
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        if (len(message.text) < 4000):
            current_vacantion.desc = f"–ó–∞–∫–∞–∑—â–∏–∫: @{current_vacantion.user} \n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_vacantion.cat} \n–ì–æ—Ä–æ–¥: {current_vacantion.city} \n\n{message.text}"
            Vacantion_list.append(current_vacantion)
            #bot.send_message(chat_id=message.chat.id, text=current_vacantion.desc)
            send_mes(message,mark=0,text=current_vacantion.desc )
            DataAddVak(current_vacantion)
            #bot.send_message(chat_id=message.chat.id, text=f"üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–∑–¥–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é.\n –ë—É–¥–µ–º –≤–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –µ—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –Ω–∞–π–¥–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –≤–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—á—Ç–æ–±—ã –≤–∞—Å –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏)", reply_markup= classic(message.from_user.username))
            send_mes(message, text=f"üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–∑–¥–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é.\n –ë—É–¥–µ–º –≤–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –µ—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –Ω–∞–π–¥–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –≤–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—á—Ç–æ–±—ã –≤–∞—Å –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏)", mark= classic(message))
        else:
            #bot.send_message(chat_id=message.chat.id, text="–î–û 4000 –°–ò–ú–í–û–õ–û–í")
            send_mes(message, mark=0,text="–î–û 4000 –°–ò–ú–í–û–õ–û–í")
            bot.register_next_step_handler(message, vacantions_desc_cat, current_vacantion)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, vacantions_desc_cat, current_vacantion)


@bot.message_handler(commands=["find_vacantion"])
def find_vacantion(message):
    try:
        current_founder = Founder_vac(user= message.from_user.username, city= "null", cat = "null")
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        #bot.send_message(chat_id=message.chat.id, text="–í–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ:"+ ListOfCat())
        send_mes(message, mark=0,text="–í–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ:"+ ListOfCat())
        bot.register_next_step_handler(message, find_vacantion_procc_prof, current_founder)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, find_vacantion)
    

def find_vacantion_procc_prof(message, current_founder):
    try:
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        if (CheckListOfCat(message)):
            current_founder.cat = message.text
            #bot.send_message(chat_id=message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"+ ListOfCityVAC())
            send_mes(message, mark=0,text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:"+ ListOfCityVAC())
            bot.register_next_step_handler(message, find_vacantion_procc_city, current_founder)
        else:
           #bot.send_message(chat_id=message.chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            send_mes(message, mark=0,text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            bot.register_next_step_handler(message, find_vacantion)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, find_vacantion_procc_prof)

def find_vacantion_procc_city(message, current_founder):
    try:
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        if (CheckListOfCityVAC(message)):
            current_founder.city = message.text
            i = 0
            IsNoVac = False
            BlackList = []
            while True:
                IsWasVac = False
                CountWas = 0
                vacantion = random.choice(Vacantion_list)
                print(f"{trans.translate_text(text=current_founder.cat.upper(), target_lang=Find_Language(message))} == {trans.translate_text(text=vacantion.cat.upper(), target_lang=Find_Language(message))}")
                print(f"{trans.translate_text(text=current_founder.city.upper(), target_lang=Find_Language(message))} ==  {trans.translate_text(text=vacantion.city.upper(), target_lang=Find_Language(message))}")
                if (str(trans.translate_text(text=current_founder.cat.upper(), target_lang="EN-GB")) == str(trans.translate_text(text=vacantion.cat.upper(), target_lang="EN-GB")) and str(trans.translate_text(text=current_founder.city.upper(), target_lang="EN-GB")) == str(trans.translate_text(text=vacantion.city.upper(), target_lang="EN-GB"))):
                    IsNoVac = True
                    break
                else:
                    for vac in BlackList:
                        if (vac == vacantion):
                            IsWasVac = True
                    if (IsWasVac == False):
                        BlackList.append(vacantion)
                if (len(BlackList) == len(Vacantion_list)):
                    IsNoVac = False
                    break
            if (IsNoVac):
                #bot.send_message(chat_id=message.chat.id, text=vacantion.desc, reply_markup= eatvak())
                send_mes(message, text=vacantion.desc, mark=eatvak(message))
                Founder_vac_list.append(current_founder)
            elif(IsNoVac == False):
                #bot.send_message(chat_id=message.chat.id, text="–ø—Ä–æ—Å—Ç–∏—Ç–µ, –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º –∞–Ω–∫–µ—Ç –µ—â–µ –Ω–µ—Ç", reply_markup=classic(message.from_user.username))
                send_mes(message, text="–ø—Ä–æ—Å—Ç–∏—Ç–µ, –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º –∞–Ω–∫–µ—Ç –µ—â–µ –Ω–µ—Ç", mark=classic(message))
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, find_vacantion_procc_city)
    

@bot.message_handler()
def everything(message):
    text = message.text

    if (text.upper() == "–ø–æ—à–µ–ª –Ω–∞—Ö—É–π".upper()):
        bot.send_message(chat_id=message.chat.id, reply_markup = None, text="–°–∞–º –∏–¥–∏" )
    
    if (message.from_user.username == Admin):
        bot.send_message(chat_id=message.chat.id, reply_markup = Admin_Center(message.from_user.username), text="–î–∞ –∑–¥–ª–∞—Å—Ç–≤—É–µ—Ç –Ω–∞—Å –∫–∞–ª–æ–ª—å" )
    if (text == str(trans.translate_text(text="[üîß]–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É", target_lang=Find_Language(message)))):
        create_anket(message)
    if (text == str(trans.translate_text(text="[üëÅ]–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", target_lang=Find_Language(message)))):
        get_random_anket(message)
    if (text == str(trans.translate_text(text="[üî®]–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", target_lang=Find_Language(message)))):
        create_vacantions(message)
    if(text == str(trans.translate_text(text="[üî®]–ú–æ—è –≤–∞–∫–∞–Ω—Å–∏—è", target_lang=Find_Language(message)))):
        SeeAllVaks(message=message)
    if (text == str(trans.translate_text(text="[ü´ß]–ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é", target_lang=Find_Language(message)))):
        find_vacantion(message)
    if (text == str(trans.translate_text(text="[üèπ]–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π", target_lang=Find_Language(message)))):
        if (message.text.upper() == "–°–¢–û–ü"):
            send_mes(message, text=f"–ú—ã –≤–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –º–µ–Ω—é", mark=classic(message))
        if anket_list:
            BlackList = []
            Nothing = False
            while True:
                #–º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã?
                if(len(BlackList) == int(ws["J1"].value)):
                    Nothing = True
                    break
                
                index = random.randint(2, int(ws["J1"].value) + 1) #—Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                
                was = False #–±—ã–ª –ª–∏ —É–∂–µ –∏–Ω–¥–µ–∫—Å –≤ –±–ª—ç–∫ –ª–∏—Å—Ç?
                
                for i in BlackList:#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–µ–∫ –ª–∏—Å—Ç
                    if (i == index):
                        was = True
                        
                if (was == False):#–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ
                    if(str(ws[f"H{index}"].value) == "True"): #–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ
                        if(str(trans.translate_text(text=message.text, target_lang='RU')).upper() == str(trans.translate_text(text=ws[f"D{index}"].value, target_lang='RU')).upper()): #–µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç
                            gorone = f"{trans.translate_text(text=ws[f'C{index}'].value, target_lang='RU')}"
                            print(type(gorone))
                            gorone = gorone.upper()
                            gortwo = f"{trans.translate_text(text=prof, target_lang='RU')}".upper()
                            print(type(gortwo))
                            gortwo = gortwo.upper()
                            print("------")
                            if (gorone == gortwo): #–µ—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç
                                print("++++")
                                CurrentUser_list.append(CurrentUser(message.from_user.username, ws[f"A{index}"])) #–¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–∏—Å–∫–∞—Ç—å –¥–∞–ª—å—à–µ"
                                print("////")
                                #print (f'–î–æ–±–∞–≤–ª–µ–Ω —é–∑–µ—Ä —Å –Ω–∏–∫–æ–º {ws["A" + index].value}') #–¥–ª—è –¥–µ–±–∞–≥–∞
                                print("((()))")
                                #–¥–æ–±–æ–≤–ª—è–µ–º –≤ –≥—Ä—É–ø—É —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ, –∏ –æ—Ç–ø—Ä–æ–≤–ª—è–µ–º
                                media_group = []
                                with open(ws[f"F{index}"].value, "rb") as f:
                                    media_group.append(telebot.types.InputMediaPhoto(f))
                                    print("*****")
                                    with open(ws[f"G{index}"].value, "rb") as v:
                                        media_group.append(telebot.types.InputMediaVideo(v))
                                        print(":::::::::::")
                                        bot.send_media_group(chat_id=message.chat.id, media = media_group)
                                print("LLLLLL")
                                #–æ—Ç–ø—Ä–æ–≤–ª—è–µ–º –∏–Ω—Ñ—É
                                send_mes(message, text=f'–ò–º—è: {ws[f"B{index}"].value}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {ws[f"C{index}"].value} \n–ì–æ—Ä–æ–¥: {ws[f"D{index}"].value} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{ws[f"E{index}"].value}', mark= eat(message))
                                break
                            else: 
                                BlackList.append(index)
                                print("----------------------------")
                                print(type(gorone))
                                print(gorone)
                                print("=")
                                print(type(gortwo))
                                print(gortwo)
                                print("----------------------------")

                        else: 
                            BlackList.append(index)
                            print(type(str(trans.translate_text(text=message.text, target_lang='RU')).upper()))
                            print(str(trans.translate_text(text=message.text, target_lang='RU')).upper())
                            print("=")
                            print(type(str(trans.translate_text(text=ws[f"D{index}"].value, target_lang='RU')).upper()))
                            print(str(trans.translate_text(text=ws[f"D{index}"].value, target_lang='RU')).upper())
                    else: 
                        BlackList.append(index)
                        print("–∞–∫—Ç–∏–≤")
            
            if (Nothing): #–Ω–µ—Ç –∞–Ω–∫–µ—Ç
                send_mes(message,mark=0, text=f"–í–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å–∏—é –µ—â–µ —Ä–∞–∑")
                #for i in BlackList:
                #    print(f'{ws[f"B{i}"].value} {ws[f"C{i}"].value.upper()} == {prof.upper()} /// {ws[f"D{i}"].value.upper()} == {message.text.upper()} /// {str(ws[f"H{index}"].value)} == true')
                bot.register_next_step_handler(message, get_city_anket)
                

    if (text == str(trans.translate_text(text="[üõë]–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", target_lang=Find_Language(message)))):
        remake_vac(message)
    if (text == str(trans.translate_text(text="[üîç]–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∞—É–Ω—Ç —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è[üîé]", target_lang=Find_Language(message)))):
        curr = CurrentUserFound(message.from_user.username)
        print (f"–Ω–∞–π–¥–µ–Ω —é–∑–µ—Ä—É {CurrentUserFound(message.from_user.username).user} —ç—Ç–æ—Ç {curr.issearching}")
        #bot.send_message(chat_id=message.chat.id, reply_markup = eat(), text=f"–¢–µ–ª–µ–≥—Ä–∞–º: @{curr.issearching}" )
        send_mes(message, mark=eat(message), text=f"–¢–µ–ª–µ–≥—Ä–∞–º: @{curr.issearching}")
        print (f"—É–¥–∞–ª–µ–Ω —é–∑–µ—Ä—É {CurrentUserFound(message.from_user.username).user} —ç—Ç–æ—Ç {curr.issearching}")
        CurrentUser_list.pop(CurrentUserDelete(message.from_user.username))
        print (f"—Ç–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ")
    if (text == str(trans.translate_text(text="[üè†]–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", target_lang=Find_Language(message)))):
        #bot.send_message(chat_id=message.chat.id, reply_markup = classic(message.from_user.username), text=f"–ú–µ–Ω—é")
        send_mes(message, text=f"–ú–µ–Ω—é", mark=classic(message))
    if (text == str(trans.translate_text(text="[üåê]–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", target_lang=Find_Language(message)))):
        bot.send_message(chat_id=message.chat.id, reply_markup=Language(message), text=f"üá¨üáß English?\nüá∑üá∫ —Ä—Éc–∫–∏–π?\nüá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π?\nüá©üá™ Deutsch?\nüá¨üá∑ ŒïŒªŒªŒ∑ŒΩŒπŒ∫ŒÆ?\nüá´üá∑ Fran√ßais?" )
        bot.register_next_step_handler(message, Change_langue)
        #Change_langue(message)
    if (text == str(trans.translate_text(text="[üîß]–ú–æ—è –∞–Ω–∫–µ—Ç–∞", target_lang=Find_Language(message)))):
        for anket in anket_list:
            if (message.from_user.username == anket.user):
                if (anket.active == True):
                    with open(anket.photo, "rb") as f:
                        with open(anket.video, "rb") as v:
                            media_group = []
                            media_group.append(telebot.types.InputMediaPhoto(f))
                            media_group.append(telebot.types.InputMediaVideo(v))
                            current_user = anket.user
                            bot.send_media_group(chat_id=message.chat.id, media = media_group)
                            #bot.send_message(chat_id=message.chat.id, text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description} \n\n\n–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞—è", reply_markup= DoChange(user=message.from_user.username))
                            send_mes(message, mark=DoChange(message), text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description} \n\n\n–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞—è")
                if (anket.active == False):
                    with open(anket.photo, "rb") as f:
                        with open(anket.video, "rb") as v:
                            media_group = []
                            media_group.append(telebot.types.InputMediaPhoto(f))
                            media_group.append(telebot.types.InputMediaVideo(v))
                            current_user = anket.user
                            bot.send_media_group(chat_id=message.chat.id, media = media_group)
                            send_mes(message, mark=DoChange(message), text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description} \n\n\n–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞—è")
                            #bot.send_message(chat_id=message.chat.id, text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description} \n\n\n–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞—è", reply_markup= DoChange(user=message.from_user.username))
    
    if (text == str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –ò–º—è", target_lang=Find_Language(message)))):
        #bot.send_message(chat_id=message.chat.id, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è")
        send_mes(message, mark=0, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è")
        bot.register_next_step_handler(message, change_procc_name)

    if (text == str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –û–ø–∏—Å–∞–Ω–∏–µ", target_lang=Find_Language(message)))):
        #bot.send_message(chat_id=message.chat.id, text="–î–æ–±–∞–≤—Ç—å–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ \n-–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã \n-–≤–æ–∑—Ä–∞—Å—Ç,\n-–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ,\n-–≤–ª–∞–¥–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏,\n-–Ω–∞–≤—ã—á–∫–∏,\n-–≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã,\n-–Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è,\n-—Å—Ç–∞—Ç—É—Å –ø—Ä–∏–±—ã–≤–∞–Ω—è –Ω–∞ –∫–∏–ø—Ä–µ")
        send_mes(message, mark=0,text="–î–æ–±–∞–≤—Ç—å–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ \n-–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã \n-–≤–æ–∑—Ä–∞—Å—Ç,\n-–≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ,\n-–≤–ª–∞–¥–µ–Ω–∏–µ —è–∑—ã–∫–∞–º–∏,\n-–Ω–∞–≤—ã—á–∫–∏,\n-–≤–∞—à–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã,\n-–Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è,\n-—Å—Ç–∞—Ç—É—Å –ø—Ä–∏–±—ã–≤–∞–Ω—è")
        #bot.send_message(chat_id=message.chat.id, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        send_mes(message, mark=0, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        bot.register_next_step_handler(message, change_procc_desc)
    
    if (text == str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –§–æ—Ç–æ", target_lang=Find_Language(message)))):
        #bot.send_message(chat_id=message.chat.id, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")
        send_mes(message, mark=0, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à–µ —Ñ–æ—Ç–æ")
        bot.register_next_step_handler(message, change_procc_photo)
    
    if (text == str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –ü—Ä–æ—Ñ–µ—Å–∏—é", target_lang=Find_Language(message)))):
        #bot.send_message(chat_id=message.chat.id, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à—É –Ω–æ–≤–æ—é –ø—Ä–æ—Ñ–µ—Å–∏—é")
        send_mes(message, mark=0, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à—É –Ω–æ–≤–æ—é –ø—Ä–æ—Ñ–µ—Å–∏—é")
        bot.register_next_step_handler(message, change_procc_prof)
    
    if (text == str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –í–∏–¥–µ–æ", target_lang=Find_Language(message)))):
        #bot.send_message(chat_id=message.chat.id, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ")
        send_mes(message, mark=0, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ")
        bot.register_next_step_handler(message, change_procc_video)
    
    if (text == str(trans.translate_text(text="[üîß]–ò–∑–º–µ–Ω–∏—Ç—å –ì–æ—Ä–æ–¥", target_lang=Find_Language(message)))):
        #bot.send_message(chat_id=message.chat.id, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥")
        send_mes(message, mark=0, text="–û—Ç–ø—Ä–∞–≤—Ç—å–µ –≤–∞—à –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥")
        bot.register_next_step_handler(message, change_procc_city)

    if (text == str(trans.translate_text(text="[üõë]–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É", target_lang=Find_Language(message)))):
        anket_now = IsHisAnket(message.from_user.username)
        anket_now.active = False
        ws["H" + str(anket_list.index(anket_now) + 2)] = anket_now.active
        wb.save(fn)
        #bot.send_message(chat_id=message.chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É", reply_markup =DoChange(message.from_user.username))
        send_mes(message, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É", mark=DoChange(message))
    
    if (text == str(trans.translate_text(text="[üõë]–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É", target_lang=Find_Language(message)))):
        anket_now = IsHisAnket(message.from_user.username)
        anket_now.active = True
        ws["H" + str(anket_list.index(anket_now) + 2)] = anket_now.active
        wb.save(fn)
        send_mes(message, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É", mark=DoChange(message))
        #bot.send_message(chat_id=message.chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É", reply_markup =DoChange(message.from_user.username))


    if (text == str(trans.translate_text(text="[üèπ]–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫", target_lang=Find_Language(message)))):
        
        pprof = ""
        ccity = ""
        print("—Ä–∞–∑")
        for i in range(int(wslog["F1"].value)):
            #print(f'{f"{wslog[f'A{i + 1}'].value}"} == {f"@{message.from_user.username}"}')
            if (f"{wslog[f'A{i + 1}'].value}" == f"@{message.from_user.username}"):
                print ("—Ç–µ—Å—Ç")
                print(str(wslog[f"G{i + 1}"].value))
                print(i + 1)
                ccity = str(wslog[f"G{i + 1}"].value)
                pprof = str(wslog[f"H{i + 1}"].value)
        print("–¥–≤–∞")
        if anket_list:
            BlackList = []
            Nothing = False
            while True:
                print("—Ç—Ä–∏")
                #–º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –∞–Ω–∫–µ—Ç—ã?
                if(len(BlackList) == int(ws["J1"].value)):
                    Nothing = True
                    break
                
                index = random.randint(2, int(ws["J1"].value) + 1) #—Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω–¥–µ–∫—Å
                
                was = False #–±—ã–ª –ª–∏ —É–∂–µ –∏–Ω–¥–µ–∫—Å –≤ –±–ª—ç–∫ –ª–∏—Å—Ç?
                
                for i in BlackList:#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–µ–∫ –ª–∏—Å—Ç
                    if (i == index):
                        was = True
                print("—á–µ—Ç—ã—Ä–µ")

                if (was == False):#–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ
                    print("–æ–¥–∏–Ω–∏–Ω")
                    if(str(ws[f"H{index}"].value) == "True"): #–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ
                        print("–¥–≤–∞–Ω–∏–Ω")
                        print(ccity)
                        print()
                        print(ws[f"D{index}"].value)
                        if(str(trans.translate_text(text=ccity, target_lang='RU')).upper() == str(trans.translate_text(text=ws[f"D{index}"].value, target_lang='RU')).upper()): #–µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç
                            print("—Ç—Ä–∏–Ω–∏–Ω")
                            gorone = f"{trans.translate_text(text=ws[f'C{index}'].value, target_lang='RU')}".upper()
                            gortwo = f"{trans.translate_text(text=pprof, target_lang='RU')}".upper()
                            print("–≤–∏–≤–∏")
                            if (gorone == gortwo): #–µ—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç
                                print("–ø—è—Ç—å")
                                CurrentUser_list.append(CurrentUser(message.from_user.username, ws[f"A{index}"])) #–¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–∏—Å–∫–∞—Ç—å –¥–∞–ª—å—à–µ"
                                #–¥–æ–±–æ–≤–ª—è–µ–º –≤ –≥—Ä—É–ø—É —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ, –∏ –æ—Ç–ø—Ä–æ–≤–ª—è–µ–º
                                media_group = []
                                with open(ws[f"F{index}"].value, "rb") as f:
                                    media_group.append(telebot.types.InputMediaPhoto(f))
                                    with open(ws[f"G{index}"].value, "rb") as v:
                                        media_group.append(telebot.types.InputMediaVideo(v))
                                        bot.send_media_group(chat_id=message.chat.id, media = media_group)
                                #–æ—Ç–ø—Ä–æ–≤–ª—è–µ–º –∏–Ω—Ñ—É
                                send_mes(message, text=f'–ò–º—è: {ws[f"B{index}"].value}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {ws[f"C{index}"].value} \n–ì–æ—Ä–æ–¥: {ws[f"D{index}"].value} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{ws[f"E{index}"].value}', mark= eat(message))
                                indind = 0

                                for pers in range(int(wslog["F1"])):
                                    if (f"@{message.from_user.username}" == str(wslog[f"A{pers + 1}"])):
                                        indind = pers
                                

                                
                                break
                            else: 
                                BlackList.append(index)

                        else: 
                            BlackList.append(index)
                            print(type(str(trans.translate_text(text=message.text, target_lang='RU')).upper()))
                            print(str(trans.translate_text(text=message.text, target_lang='RU')).upper())
                            print("=")
                            print(type(str(trans.translate_text(text=ws[f"D{index}"].value, target_lang='RU')).upper()))
                            print(str(trans.translate_text(text=ws[f"D{index}"].value, target_lang='RU')).upper())
                    else: 
                        BlackList.append(index)
                        print("–∞–∫—Ç–∏–≤")
            
            if (Nothing): #–Ω–µ—Ç –∞–Ω–∫–µ—Ç
                send_mes(message,mark=0, text=f"–í–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å–∏—é –µ—â–µ —Ä–∞–∑")
                #for i in BlackList:
                #    print(f'{ws[f"B{i}"].value} {ws[f"C{i}"].value.upper()} == {prof.upper()} /// {ws[f"D{i}"].value.upper()} == {message.text.upper()} /// {str(ws[f"H{index}"].value)} == true')
                bot.register_next_step_handler(message, get_city_anket)
        else:
            bot.send_message(chat_id=message.chat.id, text="–ü—Ä–æ—Å—Ç–∏—Ç–µ, –ø—Ä–æ—Å—Ç–∏—Ç–µ")








    if(message.from_user.username == Admin):
        if (text == "–î–æ–±–∞–≤–∏—Ç—å –ê–Ω–∫–µ—Ç—É"):
            create_anket(message)
        if (text == "–£–≤–∏–¥–µ—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã"):
            i = 0
            for anket in anket_list:
                bot.send_message(chat_id=message.chat.id, text=i)
                send_mes(message, mark=0, text=anket.user)
                #bot.send_message(chat_id=message.chat.id, text=anket.user)
                if (anket.active == True):
                    with open(anket.photo, "rb") as f:
                        with open(anket.video, "rb") as v:
                            media_group = []
                            media_group.append(telebot.types.InputMediaPhoto(f))
                            media_group.append(telebot.types.InputMediaVideo(v))
                            current_user = anket.user
                            bot.send_media_group(chat_id=message.chat.id, media = media_group)
                            send_mes(message, mark=0, text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description} \n\n\n–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞—è")
                            #bot.send_message(chat_id=message.chat.id, text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description} \n\n\n–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞—è")
                            i += 1
                if (anket.active == False):
                    with open(anket.photo, "rb") as f:
                        with open(anket.video, "rb") as v:
                            media_group = []
                            media_group.append(telebot.types.InputMediaPhoto(f))
                            media_group.append(telebot.types.InputMediaVideo(v))
                            current_user = anket.user
                            bot.send_media_group(chat_id=message.chat.id, media = media_group)
                            send_mes(message, text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description} \n\n\n–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞—è", mark=DoChange(message))
                            #bot.send_message(chat_id=message.chat.id, text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description} \n\n\n–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞—è", reply_markup= DoChange(user=message.from_user.username))
                            i += 1
        if(text == "–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"):
            bot.send_message(chat_id=message.chat.id, text="–ê–π–¥–∏")
            bot.register_next_step_handler(message, Change_adm)
        if(text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—ã –∏–∑ –¥–∞—Ç—ã"):
            DataRead()
            bot.send_message(chat_id=message.chat.id, text="–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞ —É—Å–ø–µ—à–Ω–∞")
        if (text == "–£–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏"):
            Adm_vac_seeall(message)
        if (text == "–£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"):
            Adm_vac_delete(message)
        if(text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –¥–∞—Ç—ã"):
            DataReadVak()
            bot.send_message(chat_id=message.chat.id, text="–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞ —É—Å–ø–µ—à–Ω–∞")
    

def Change_langue(message):
    Change_Language(message)
    send_mes(message, mark=classic(message), text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ —è–∑—ã–∫")

def Change_adm (message):
    anket = anket_list[int(message.text)]
    bot.send_message(chat_id=message.chat.id, text=anket.user)
    if (anket.active == True):
        with open(anket.photo, "rb") as f:
            with open(anket.video, "rb") as v:
                media_group = []
                media_group.append(telebot.types.InputMediaPhoto(f))
                media_group.append(telebot.types.InputMediaVideo(v))
                current_user = anket.user
                bot.send_media_group(chat_id=message.chat.id, media = media_group)
                bot.send_message(chat_id=message.chat.id, text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description} \n\n\n–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞—è", reply_markup= DoChange(user=message.from_user.username))
    if (anket.active == False):
        with open(anket.photo, "rb") as f:
            with open(anket.video, "rb") as v:
                media_group = []
                media_group.append(telebot.types.InputMediaPhoto(f))
                media_group.append(telebot.types.InputMediaVideo(v))
                current_user = anket.user
                bot.send_media_group(chat_id=message.chat.id, media = media_group)
                bot.send_message(chat_id=message.chat.id, text=f"–ò–º—è: {anket.name}\n\n–ü—Ä–æ—Ñ–µ—Å–∏–∏: {anket.profession} \n–ì–æ—Ä–æ–¥: {anket.city} \n\n–û–ø–∏—Å–∞–Ω–∏–µ: \n{anket.description} \n\n\n–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã: –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞—è", reply_markup= DoChange(user=message.from_user.username))
    bot.send_message(chat_id=message.chat.id, text=f" –ò–º—è - 1 \n–û–ø–∏—Å–∞–Ω–∏–µ - 2 \n–§–æ—Ç–æ - 3\n–í–∏–¥–µ–æ - 4 \n–ü—Ä–æ—Ñ–µ—Å–∏—è - 5\n –ì–æ—Ä–æ–¥ - 6\n –°—Ç–∞—Ç—É—Å - 7")
    bot.register_next_step_handler(message, Change_procc_adm, message.text)

    
def SeeAllVaks(message):
    idd = 0
    for vak in Vacantion_list:
        if (vak.user == message.from_user.username):
            idd += 1
            send_mes(message, mark=0, text=f"–í–∞–∫–∞–Ω—Å–∏—è –Ω–∏–∂–µ –∏–º–µ–µ—Ç –Ω–æ–º–µ—Ä {idd}")
            bot.send_message(chat_id=message.chat.id, reply_markup= AddVak(message),text=f"{vak.desc}\n\n{trans.translate_text(text= vak.desc, target_lang=Find_Language(message))}")
            


def Change_procc_adm(message, id):
    bot.send_message(chat_id=message.chat.id, text="–ù–∞ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?")
    if (int(message.text) == 1):
        bot.register_next_step_handler(message, Procc_Change_name_adm, int(id))
    if (int(message.text) == 2):
        bot.register_next_step_handler(message, Procc_Change_desc_adm, int(id))
    if (int(message.text) == 3):
        bot.register_next_step_handler(message, Procc_Change_desc_adm, int(id))
    if (int(message.text) == 4):
        bot.register_next_step_handler(message, Procc_Change_photo_adm, int(id))
    if (int(message.text) == 5):
        bot.register_next_step_handler(message, Procc_Change_prof_adm, int(id))
    if (int(message.text) == 6):
        bot.register_next_step_handler(message, Procc_Change_city_adm, int(id))


def Procc_Change_name_adm(message, id):
    anket_list[id].name = message.text
    ws["B" + str(id + 2)] = anket_list[id].name
    wb.save(fn)
    bot.send_message(chat_id=message.chat.id, text="–ò–∑–º–µ–Ω–∏–Ω–µ–Ω–æ")

def Procc_Change_desc_adm(message, id):
    anket_list[id].description = message.text
    ws["E" + str(id + 2)] = anket_list[id].description
    wb.save(fn)
    bot.send_message(chat_id=message.chat.id, text="–ò–∑–º–µ–Ω–∏–Ω–µ–Ω–æ")

def Procc_Change_photo_adm(message, id):
    try:
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        with open(f"{file_id}.jpg", "wb") as f:
            f.write(file)
        anket_list[id].photo = file_id
        ws["F" + str(id + 2)] = anket_list[id].photo
        wb.save(fn)
        bot.send_message(chat_id=message.chat.id, text="–ò–∑–º–µ–Ω–∏–Ω–µ–Ω–æ")
    except:
        bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—Ç–µ –§–û–¢–û")
        bot.register_next_step_handler(message, Change_adm) 

def Procc_Change_video_adm(message, id):
    try:
        video_id = message.video.file_id
        video = bot.get_file(video_id)
        video_url = f"https://api.telegram.org/file/bot{bot.token}/{video.file_path}"
        response = requests.get(video_url)
        if response.status_code == 200:
            with open(f"{video_id}.mp4", "wb") as f:
                f.write(response.content)
        anket_list[id].video = video_id
        ws["G" + str(id + 2)] = anket_list[id].video
        wb.save(fn)
        bot.send_message(chat_id=message.chat.id, text="–ò–∑–º–µ–Ω–∏–Ω–µ–Ω–æ")
    except:
        bot.send_message(chat_id=message.chat.id, text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞, –æ—Ç–ø—Ä–∞–≤—Ç—å–µ —Ñ–æ—Ç–æ ")
        bot.register_next_step_handler(message, Change_adm)


def Procc_Change_prof_adm(message, id):
    current = Profession_list.index(anket_list[id].profession)
    Profession_list[current] = message.text
    anket_list[id].profession = message.text
    ws["C" + str(id + 2)] = anket_list[id].profession
    wb.save(fn)
    bot.send_message(chat_id=message.chat.id, text="–ò–∑–º–µ–Ω–∏–Ω–µ–Ω–æ") 

def Procc_Change_city_adm(message, id):
    current = City_list.index(anket_list[id].city)
    City_list[current] = message.text 
    anket_list[id].city = message.text
    ws["C" + str(id + 2)] = anket_list[id].profession
    wb.save(fn)
    bot.send_message(chat_id=message.chat.id, text="–ò–∑–º–µ–Ω–∏–Ω–µ–Ω–æ") 


def remake_vac(message):
    send_mes(message, mark=0, text="–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–¥ –∫–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–∞–∫–∞–Ω—Å–∏—è –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?")
    #bot.send_message(chat_id=message.chat.id, text="–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–¥ –∫–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤–∞–∫–∞–Ω—Å–∏—è –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?")
    bot.register_next_step_handler(message, remake_vac_procc)

def remake_vac_procc(message):
    current_vak = FindWhichVak(message, message.text)
    Vacantion_list.remove(current_vak)
    print(f"–Ω—É —Ç–∏–ø - {int(message.text)}")
    index = str(FindIndexVak(current_vak.user, int(message.text)) + 2)
    print(index)
    wsvak["E" + index] = "#deleted"
    wbvak.save(fnvak)
    send_mes(message, mark=classic(message), text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É–¥–∞–ª–∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é")
    #bot.send_message(chat_id=message.chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É–¥–∞–ª–∏–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é", reply_markup=classic(message.from_user.username))

def change_procc_name(message):
    try:
        if (message.text != None):
            anket_now = IsHisAnket(message.from_user.username)
            anket_now.name = message.text
            ws["B" + str(anket_list.index(anket_now) + 2)] = anket_now.name
            wb.save(fn)
            send_mes(message, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –∏–º—è", mark=DoChange(message))
            #bot.send_message(chat_id=message.chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –∏–º—è", reply_markup =DoChange(message.from_user.username))
        else:
            send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
            bot.register_next_step_handler(message, change_procc_name)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, change_procc_name)

def change_procc_desc(message):
    try:
        if (message.text != None):
            anket_now = IsHisAnket(message.from_user.username)
            anket_now.description = message.text
            ws["E" + str(anket_list.index(anket_now) + 2)] = anket_now.description
            wb.save(fn)
            send_mes(message, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ", mark=DoChange(message))
            #bot.send_message(chat_id=message.chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ",reply_markup =DoChange(message.from_user.username))
        else:
            send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
            bot.register_next_step_handler(message, change_procc_desc)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, change_procc_desc)

def change_procc_photo(message):
    try:
        anket_now = IsHisAnket(message.from_user.username)
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file = bot.download_file(file_info.file_path)
        with open(f"{file_id}.jpg", "wb") as f:
            f.write(file)
        anket_now.photo = f"{file_id}.jpg"
        ws["F" + str(anket_list.index(anket_now) + 2)] = anket_now.photo
        wb.save(fn)
        send_mes(message, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ñ–æ—Ç–æ", reply_markup =DoChange(message))
        #bot.send_message(chat_id=message.chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ñ–æ—Ç–æ", reply_markup =DoChange(message.from_user.username))
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, change_procc_photo)


def change_procc_prof(message):
    try:
        if (message.text != None):
            anket_now = IsHisAnket(message.from_user.username)
            for i in range(len(Profession_list)):
                if (anket_now.profession == Profession_list[i]):
                    Profession_list[i] = message.text
            anket_now.profession = message.text
            ws["C" + str(anket_list.index(anket_now) + 2)] = anket_now.profession
            wb.save(fn)
            send_mes(message, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –ø—Ä–æ—Ñ–µ—Å–∏—é", reply_markup =DoChange(message), mark=DoChange(message))
            #bot.send_message(chat_id=message.chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –ø—Ä–æ—Ñ–µ—Å–∏—é", reply_markup =DoChange(message.from_user.username))
        else:
            send_mes(message, mark=0, text="–•–º–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º")
            #bot.send_message(chat_id=message.chat.id, text="–•–º–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∞ —Ç–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º")
            bot.register_next_step_handler(message, change_procc_prof)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, change_procc_prof)

def change_procc_video(message):
    try:
        anket_now = IsHisAnket(message.from_user.username)
        video_id = message.video.file_id
        video = bot.get_file(video_id)
        video_url = f"https://api.telegram.org/file/bot{bot.token}/{video.file_path}"
        response = requests.get(video_url)
        if response.status_code == 200:
            with open(f"{video_id}.mp4", "wb") as f:
                f.write(response.content)
        anket_now.video = f"{video_id}.mp4"
        ws["G" + str(anket_list.index(anket_now) + 2)] = anket_now.video
        wb.save(fn)
        send_mes(message, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –≤–∏–¥–µ–æ", mark=DoChange(message))
        #bot.send_message(chat_id=message.chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –≤–∏–¥–µ–æ", reply_markup =DoChange(message.from_user.username))
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, change_procc_video)

def change_procc_city(message):
    try:
        if (message.text != None):
            anket_now = IsHisAnket(message.from_user.username)
            for i in range(len(City_list)):
                if (anket_now.city == City_list[i]):
                    City_list[i] = message.text
            anket_now.city = message.text
            ws["D" + str(anket_list.index(anket_now) + 2)] = anket_now.city
            wb.save(fn)
            send_mes(message, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –≥–æ—Ä–æ–¥", mark=DoChange(message))
            #bot.send_message(chat_id=message.chat.id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–º–µ–Ω—è–ª–∏ –≥–æ—Ä–æ–¥", reply_markup =DoChange(message.from_user.username))
        else:
            send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
            bot.register_next_step_handler(message, change_procc_prof)
    except:
        send_mes(message, mark=classic(message), text="–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —á—É—Ç—å –ø–æ–∑–∂–µ")
        bot.register_next_step_handler(message, change_procc_prof)

def Adm_vac_seeall(message):
    for index in range(int(ws["J1"].value)):
        print(index)
        bot.send_message(chat_id=message.chat.id, text=f'{index} \n{ws[f"A{str(index + 2)}"].value} \n{ws[f"B{str(index + 2)}"].value} \n{ws[f"C{str(index + 2)}"].value} \n{ws[f"D{str(index + 2)}"].value} \n{ws[f"E{str(index + 2)}"].value} \n{ws[f"H{str(index + 2)}"].value}')
        media_group = []
        with open(ws[f"F{index + 2}"].value, "rb") as f:
            media_group.append(telebot.types.InputMediaPhoto(f))
        with open(ws[f"G{index + 2}"].value, "rb") as v:
            media_group.append(telebot.types.InputMediaVideo(v))
        bot.send_media_group(chat_id=message.chat.id, media = media_group)



def Adm_vac_delete(message):
    send_mes(message, mark=0, text="–û—Ç–ø—Ä–∞–≤—å –∞–π–¥–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
    #bot.send_message(chat_id=message.chat.id, text="–û—Ç–ø—Ä–∞–≤—å –∞–π–¥–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
    bot.register_next_step_handler(message, Adm_vac_delete_procc)


def Adm_vac_delete_procc(message):
    indexx = int(message.text) 
    wsvak["E" + str(indexx + 2)] = "#deleted"
    wbvak.save(fnvak)    
    Vacantion_list.pop(indexx)
    bot.send_message(chat_id=message.chat.id, text="—è –∫–æ–Ω—á–∏–ª")


while True:
    try:
        bot.polling(non_stop=True, interval=0)
    except Exception as e:
        print(e)
        time.sleep(5)
        continue
